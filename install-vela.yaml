---
# Source: vela-core/templates/kubevela-controller.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubevela-vela-core
  labels:
    helm.sh/chart: vela-core-0.1.0
    app.kubernetes.io/name: vela-core
    app.kubernetes.io/instance: kubevela
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: vela-core/templates/kubevela-controller.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubevela-vela-core:manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "cluster-admin"
subjects:
  - kind: ServiceAccount
    name: kubevela-vela-core
    namespace: vela-system
---
# Source: vela-core/templates/kubevela-controller.yaml
# permissions to do leader election.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubevela-vela-core:leader-election-role
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps/status
    verbs:
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
---
# Source: vela-core/templates/kubevela-controller.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubevela-vela-core:leader-election-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubevela-vela-core:leader-election-role
subjects:
  - kind: ServiceAccount
    name: kubevela-vela-core
---
# Source: vela-core/templates/admission-webhooks/webhookService.yaml
apiVersion: v1
kind: Service
metadata:
  name: vela-core-webhook
  namespace: vela-system
  labels:
    helm.sh/chart: vela-core-0.1.0
    app.kubernetes.io/name: vela-core
    app.kubernetes.io/instance: kubevela
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      targetPort: 9443
      protocol: TCP
      name: https
  selector:
    
      app.kubernetes.io/name: vela-core
      app.kubernetes.io/instance: kubevela
---
# Source: vela-core/templates/kubevela-controller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubevela-vela-core
  namespace: vela-system
  labels:
    helm.sh/chart: vela-core-0.1.0
    app.kubernetes.io/name: vela-core
    app.kubernetes.io/instance: kubevela
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vela-core
      app.kubernetes.io/instance: kubevela
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vela-core
        app.kubernetes.io/instance: kubevela
    spec:
      serviceAccountName: kubevela-vela-core
      securityContext:
        {}
      containers:
        - name: kubevela
          securityContext:
            {}
          args:
            - "--metrics-addr=:8080"
            - "--enable-leader-election"
            
            
            
            - "--use-webhook=true"
            - "--webhook-port=9443"
            - "--webhook-cert-dir=/etc/k8s-webhook-certs"
            
            
            - "--health-addr=:9440"
            - "--apply-once-only=off"
            
            - "--disable-caps=metrics"
            
            - "--system-definition-namespace=vela-system"
            - "--application-revision-limit=10"
            - "--definition-revision-limit=20"
          image: oamdev/vela-core:v1.0.6
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 50m
              memory: 20Mi
          
          ports:
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
            - containerPort: 9440
              name: healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
            initialDelaySeconds: 90
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 90
            periodSeconds: 5
          volumeMounts:
            - mountPath: /etc/k8s-webhook-certs
              name: tls-cert-vol
              readOnly: true
          
      
      volumes:
        - name: tls-cert-vol
          secret:
            defaultMode: 420
            secretName: kubevela-vela-core-admission
---
# Source: vela-core/templates/defwithtemplate/task.yaml
# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: task
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "Describes jobs that run code or a script to completion."
spec:
  workload:
    definition:
      apiVersion: batch/v1
      kind: Job
  schematic:
    cue:
      template: |
        output: {
        	apiVersion: "batch/v1"
        	kind:       "Job"
        	spec: {
        		parallelism: parameter.count
        		completions: parameter.count
        		template: spec: {
        			restartPolicy: parameter.restart
        			containers: [{
        				name:  context.name
        				image: parameter.image
        
        				if parameter["cmd"] != _|_ {
        					command: parameter.cmd
        				}
        			}]
        		}
        	}
        }
        parameter: {
        	// +usage=Specify number of tasks to run in parallel
        	// +short=c
        	count: *1 | int
        
        	// +usage=Which image would you like to use for your service
        	// +short=i
        	image: string
        
        	// +usage=Define the job restart policy, the value can only be Never or OnFailure. By default, it's Never.
        	restart: *"Never" | string
        
        	// +usage=Commands to run in the container
        	cmd?: [...string]
        }
---
# Source: vela-core/templates/defwithtemplate/webservice.yaml
# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: webservice
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "Describes long-running, scalable, containerized services that have a stable network endpoint to receive external network traffic from customers."
spec:
  workload:
    definition:
      apiVersion: apps/v1
      kind: Deployment
  schematic:
    cue:
      template: |
        output: {
        	apiVersion: "apps/v1"
        	kind:       "Deployment"
        	spec: {
        		selector: matchLabels: {
        			"app.oam.dev/component": context.name
        			if parameter.addRevisionLabel {
        				"app.oam.dev/appRevision": context.appRevision
        			}
        		}
        
        		template: {
        			metadata: labels: {
        				"app.oam.dev/component": context.name
        				if parameter.addRevisionLabel {
        					"app.oam.dev/appRevision": context.appRevision
        				}
        			}
        
        			spec: {
        				containers: [{
        					name:  context.name
        					image: parameter.image
        
        					if parameter["cmd"] != _|_ {
        						command: parameter.cmd
        					}
        
        					if parameter["env"] != _|_ {
        						env: parameter.env
        					}
        
        					if context["config"] != _|_ {
        						env: context.config
        					}
        
        					ports: [{
        						containerPort: parameter.port
        					}]
        
        					if parameter["cpu"] != _|_ {
        						resources: {
        							limits:
        								cpu: parameter.cpu
        							requests:
        								cpu: parameter.cpu
        						}
        					}
        
        					if parameter["volumes"] != _|_ {
        						volumeMounts: [ for v in parameter.volumes {
        							{
        								mountPath: v.mountPath
        								name:      v.name
        							}}]
        					}
        				}]
        
        			if parameter["volumes"] != _|_ {
        				volumes: [ for v in parameter.volumes {
        					{
        						name: v.name
        						if v.type == "pvc" {
        							persistentVolumeClaim: {
        								claimName: v.claimName
        							}
        						}
        						if v.type == "configMap" {
        							configMap: {
        								defaultMode: v.defaultMode
        								name:        v.cmName
        								if v.items != _|_ {
        									items: v.items
        								}
        							}
        						}
        						if v.type == "secret" {
        							secret: {
        								defaultMode: v.defaultMode
        								secretName:  v.secretName
        								if v.items != _|_ {
        									items: v.items
        								}
        							}
        						}
        						if v.type == "emptyDir" {
        							emptyDir: {
        								medium: v.medium
        							}
        						}
        					}}]
        			}
        		}
        		}
        	}
        }
        parameter: {
        	// +usage=Which image would you like to use for your service
        	// +short=i
        	image: string
        
        	// +usage=Commands to run in the container
        	cmd?: [...string]
        
        	// +usage=Which port do you want customer traffic sent to
        	// +short=p
        	port: *80 | int
        	// +usage=Define arguments by using environment variables
        	env?: [...{
        		// +usage=Environment variable name
        		name: string
        		// +usage=The value of the environment variable
        		value?: string
        		// +usage=Specifies a source the value of this var should come from
        		valueFrom?: {
        			// +usage=Selects a key of a secret in the pod's namespace
        			secretKeyRef: {
        				// +usage=The name of the secret in the pod's namespace to select from
        				name: string
        				// +usage=The key of the secret to select from. Must be a valid secret key
        				key: string
        			}
        		}
        	}]
        	// +usage=Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
        	cpu?: string
        
        	// If addRevisionLabel is true, the appRevision label will be added to the underlying pods 
        	addRevisionLabel: *false | bool
        
        	// +usage=Declare volumes and volumeMounts
        	volumes?: [...{
        		name:      string
        		mountPath: string
        		// +usage=Specify volume type, options: "pvc","configMap","secret","emptyDir"
        		type: "pvc" | "configMap" | "secret" | "emptyDir"
        		if type == "pvc" {
        			claimName: string
        		}
        		if type == "configMap" {
        			defaultMode: *420 | int
        			cmName:      string
        			items?: [...{
        				key:  string
        				path: string
        				mode: *511 | int
        			}]
        		}
        		if type == "secret" {
        			defaultMode: *420 | int
        			secretName:  string
        			items?: [...{
        				key:  string
        				path: string
        				mode: *511 | int
        			}]
        		}
        		if type == "emptyDir" {
        			medium: *"" | "Memory"
        		}
        	}]
        }
---
# Source: vela-core/templates/defwithtemplate/worker.yaml
# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: worker
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "Describes long-running, scalable, containerized services that running at backend. They do NOT have network endpoint to receive external network traffic."
spec:
  workload:
    definition:
      apiVersion: apps/v1
      kind: Deployment
  schematic:
    cue:
      template: |
        output: {
        	apiVersion: "apps/v1"
        	kind:       "Deployment"
        	spec: {
        		selector: matchLabels: {
        			"app.oam.dev/component": context.name
        		}
        
        		template: {
        			metadata: labels: {
        				"app.oam.dev/component": context.name
        			}
        
        			spec: {
        				containers: [{
        					name:  context.name
        					image: parameter.image
        
        					if parameter["cmd"] != _|_ {
        						command: parameter.cmd
        					}
        
        					if parameter["volumes"] != _|_ {
        						volumeMounts: [ for v in parameter.volumes {
        							{
        								mountPath: v.mountPath
        								name:      v.name
        							}}]
        					}
        				}]
        
        				if parameter["volumes"] != _|_ {
        					volumes: [ for v in parameter.volumes {
        						{
        							name: v.name
        							if v.type == "pvc" {
        								persistentVolumeClaim: {
        									claimName: v.claimName
        								}
        							}
        							if v.type == "configMap" {
        								configMap: {
        									defaultMode: v.defaultMode
        									name:        v.cmName
        									if v.items != _|_ {
        										items: v.items
        									}
        								}
        							}
        							if v.type == "secret" {
        								secret: {
        									defaultMode: v.defaultMode
        									secretName:  v.secretName
        									if v.items != _|_ {
        										items: v.items
        									}
        								}
        							}
        							if v.type == "emptyDir" {
        								emptyDir: {
        									medium: v.medium
        								}
        							}
        						}}]
        				}
        			}
        		}
        	}
        }
        
        parameter: {
        	// +usage=Which image would you like to use for your service
        	// +short=i
        	image: string
        	// +usage=Commands to run in the container
        	cmd?: [...string]
        	// +usage=Declare volumes and volumeMounts
        	volumes?: [...{
        		name:      string
        		mountPath: string
        		// +usage=Specify volume type, options: "pvc","configMap","secret","emptyDir"
        		type: "pvc" | "configMap" | "secret" | "emptyDir"
        		if type == "pvc" {
        			claimName: string
        		}
        		if type == "configMap" {
        			defaultMode: *420 | int
        			cmName:      string
        			items?: [...{
        				key:  string
        				path: string
        				mode: *511 | int
        			}]
        		}
        		if type == "secret" {
        			defaultMode: *420 | int
        			secretName:  string
        			items?: [...{
        				key:  string
        				path: string
        				mode: *511 | int
        			}]
        		}
        		if type == "emptyDir" {
        			medium: *"" | "Memory"
        		}
        	}]
        }
---
# Source: vela-core/templates/admission-webhooks/mutatingWebhookConfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: kubevela-vela-core-admission
  namespace: vela-system
webhooks:
  - clientConfig:
      caBundle: Cg==
      service:
        name: vela-core-webhook
        namespace: vela-system
        path: /mutating-core-oam-dev-v1alpha2-applicationconfigurations
    failurePolicy: Ignore
    name: mutating.core.oam.dev.v1alpha2.applicationconfigurations
    sideEffects: None
    rules:
      - apiGroups:
          - core.oam.dev
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - applicationconfigurations
        scope: Namespaced
    admissionReviewVersions:
      - v1beta1
    timeoutSeconds: 5
  - clientConfig:
      caBundle: Cg==
      service:
        name: vela-core-webhook
        namespace: vela-system
        path: /mutating-core-oam-dev-v1beta1-approllout
    failurePolicy: Ignore
    name: mutating.core.oam.dev.v1beta1.approllouts
    sideEffects: None
    rules:
      - apiGroups:
          - core.oam.dev
        apiVersions:
          - v1beta1
        operations:
          - CREATE
          - UPDATE
        resources:
          - approllouts
        scope: Namespaced
    admissionReviewVersions:
      - v1beta1
    timeoutSeconds: 5
  - clientConfig:
      caBundle: Cg==
      service:
        name: vela-core-webhook
        namespace: vela-system
        path: /mutating-core-oam-dev-v1alpha2-components
    failurePolicy: Ignore
    name: mutating.core.oam-dev.v1alpha2.components
    sideEffects: None
    rules:
      - apiGroups:
          - core.oam.dev
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - components
        scope: Namespaced
    admissionReviewVersions:
      - v1beta1
    timeoutSeconds: 5
  - clientConfig:
      caBundle: Cg==
      service:
        name: vela-core-webhook
        namespace: vela-system
        path: /mutate-standard-oam-dev-v1alpha1-podspecworkload
    failurePolicy: Ignore
    name: mcontainerized.kb.io
    sideEffects: None
    admissionReviewVersions:
    - v1beta1
    rules:
      - apiGroups:
          - standard.oam.dev
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - podspecworkloads
---
# Source: vela-core/templates/definitions/healthscopes.yaml
apiVersion: core.oam.dev/v1beta1
kind: ScopeDefinition
metadata:
  name: healthscopes.core.oam.dev
  namespace: vela-system
spec:
  workloadRefsPath: spec.workloadRefs
  allowComponentOverlap: true
  definitionRef:
    name: healthscopes.core.oam.dev
---
# Source: vela-core/templates/defwithtemplate/annotations.yaml
# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1beta1
kind: TraitDefinition
metadata:
  annotations:
    definition.oam.dev/description: "Add annotations for your Workload."
  name: annotations
  namespace: vela-system
spec:
  appliesToWorkloads:
    - webservice
    - worker
  schematic:
    cue:
      template: |-
        patch: {
        	spec: template: metadata: annotations: {
        		for k, v in parameter {
        			"\(k)": v
        		}
        	}
        }
        parameter: [string]: string
---
# Source: vela-core/templates/defwithtemplate/cpuscaler.yaml
# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1beta1
kind: TraitDefinition
metadata:
  annotations:
    definition.oam.dev/description: "Automatically scale the component based on CPU usage."
  name: cpuscaler
  namespace: vela-system
spec:
  appliesToWorkloads:
    - webservice
    - worker
  schematic:
    cue:
      template: |
        outputs: cpuscaler: {
        	apiVersion: "autoscaling/v2beta2"
        	kind:       "HorizontalPodAutoscaler"
        	metadata: name: context.name
        	spec: {
        		scaleTargetRef: {
        			apiVersion: "apps/v1"
        			kind:       "Deployment"
        			name:       context.name
        		}
        		minReplicas: parameter.min
        		maxReplicas: parameter.max
        		metrics: [{
        			type: "Resource"
        			resource: {
        				name: "cpu"
        				target: {
        					type:               "Utilization"
        					averageUtilization: parameter.cpuUtil
        				}
        			}
        		}]
        	}
        }
        parameter: {
        
        	// +usage=Specify the minimal number of replicas to which the autoscaler can scale down
        	min: *1 | int
        
        	// +usage=Specify the maximum number of of replicas to which the autoscaler can scale up
        	max: *10 | int
        
        	// +usage=Specify the average cpu utilization, for example, 50 means the CPU usage is 50%
        	cpuUtil: *50 | int
        }
---
# Source: vela-core/templates/defwithtemplate/ingress.yaml
# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1beta1
kind: TraitDefinition
metadata:
  annotations:
    definition.oam.dev/description: "Enable public web traffic for the component."
  name: ingress
  namespace: vela-system
spec:
  status:
    customStatus: |-
      let igs = context.outputs.ingress.status.loadBalancer.ingress
      if igs == _|_ {
        message: "No loadBalancer found, visiting by using 'vela port-forward " + context.appName + " --route'\n"
      }
      if len(igs) > 0 {
        if igs[0].ip != _|_ {
          message: "Visiting URL: " + context.outputs.ingress.spec.rules[0].host + ", IP: " + igs[0].ip
        }
        if igs[0].ip == _|_ {
          message: "Visiting URL: " + context.outputs.ingress.spec.rules[0].host
        }
      }
    healthPolicy: |
      isHealth: len(context.outputs.service.spec.clusterIP) > 0
  appliesToWorkloads:
    - webservice
    - worker
  podDisruptive: false
  schematic:
    cue:
      template: |
        // trait template can have multiple outputs in one trait
        outputs: service: {
        	apiVersion: "v1"
        	kind:       "Service"
        	metadata:
        		name: context.name
        	spec: {
        		selector: {
        			"app.oam.dev/component": context.name
        		}
        		ports: [
        			for k, v in parameter.http {
        				port:       v
        				targetPort: v
        			},
        		]
        	}
        }
        
        outputs: ingress: {
        	apiVersion: "networking.k8s.io/v1beta1"
        	kind:       "Ingress"
        	metadata:
        		name: context.name
        	spec: {
        		rules: [{
        			host: parameter.domain
        			http: {
        				paths: [
        					for k, v in parameter.http {
        						path: k
        						backend: {
        							serviceName: context.name
        							servicePort: v
        						}
        					},
        				]
        			}
        		}]
        	}
        }
        
        parameter: {
        	// +usage=Specify the domain you want to expose
        	domain: string
        
        	// +usage=Specify the mapping relationship between the http path and the workload port
        	http: [string]: int
        }
---
# Source: vela-core/templates/defwithtemplate/labels.yaml
# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1beta1
kind: TraitDefinition
metadata:
  annotations:
    definition.oam.dev/description: "Add labels for your Workload."
  name: labels
  namespace: vela-system
spec:
  appliesToWorkloads:
    - webservice
    - worker
  schematic:
    cue:
      template: |-
        patch: {
        	spec: template: metadata: labels: {
        		for k, v in parameter {
        			"\(k)": v
        		}
        	}
        }
        parameter: [string]: string
---
# Source: vela-core/templates/defwithtemplate/scaler.yaml
# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1beta1
kind: TraitDefinition
metadata:
  annotations:
    definition.oam.dev/description: "Manually scale the component."
  name: scaler
  namespace: vela-system
spec:
  appliesToWorkloads:
    - webservice
    - worker
  podDisruptive: false
  schematic:
    cue:
      template: |
        patch: {
        	spec: replicas: parameter.replicas
        }
        parameter: {
        	// +usage=Specify the number of workload
        	replicas: *1 | int
        }
---
# Source: vela-core/templates/defwithtemplate/sidecar.yaml
# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1beta1
kind: TraitDefinition
metadata:
  annotations:
    definition.oam.dev/description: "Inject a sidecar container to the component."
  name: sidecar
  namespace: vela-system
spec:
  appliesToWorkloads:
    - webservice
    - worker
  schematic:
    cue:
      template: |-
        patch: {
        	// +patchKey=name
        	spec: template: spec: containers: [{
        		name:  parameter.name
        		image: parameter.image
        		if parameter.cmd != _|_ {
        			command: parameter.cmd
        		}
        		if parameter["volumes"] != _|_ {
        			volumeMounts: [ for v in parameter.volumes {
        				{
        					mountPath: v.path
        					name:      v.name
        				}
        			}]
        		}
        	}]
        }
        parameter: {
        	// +usage=Specify the name of sidecar container
        	name: string
        
        	// +usage=Specify the image of sidecar container
        	image: string
        
        	// +usage=Specify the commands run in the sidecar
        	cmd?: [...string]
        
        	// +usage=Specify the shared volume path
        	volumes?: [...{
        		name: string
        		path: string
        	}]
        }
---
# Source: vela-core/templates/admission-webhooks/validatingWebhookConfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: kubevela-vela-core-admission
  namespace: vela-system
webhooks:
  - clientConfig:
      caBundle: Cg==
      service:
        name: vela-core-webhook
        namespace: vela-system
        path: /validating-core-oam-dev-v1alpha2-applicationconfigurations
    failurePolicy: Ignore
    name: validating.core.oam.dev.v1alpha2.applicationconfigurations
    sideEffects: None
    rules:
      - apiGroups:
          - core.oam.dev
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - applicationconfigurations
        scope: Namespaced
    admissionReviewVersions:
      - v1beta1
    timeoutSeconds: 5
  - clientConfig:
      caBundle: Cg==
      service:
        name: vela-core-webhook
        namespace: vela-system
        path: /validating-core-oam-dev-v1beta1-approllout
    failurePolicy: Ignore
    name: validating.core.oam.dev.v1beta1.approllouts
    sideEffects: None
    rules:
      - apiGroups:
          - core.oam.dev
        apiVersions:
          - v1beta1
        operations:
          - CREATE
          - UPDATE
        resources:
          - approllouts
        scope: Namespaced
    admissionReviewVersions:
      - v1beta1
    timeoutSeconds: 5
  - clientConfig:
      caBundle: Cg==
      service:
        name: vela-core-webhook
        namespace: vela-system
        path: /validating-core-oam-dev-v1alpha2-components
    failurePolicy: Ignore
    name: validating.core.oam.dev.v1alpha2.components
    sideEffects: None
    rules:
      - apiGroups:
          - core.oam.dev
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - components
        scope: Namespaced
    admissionReviewVersions:
      - v1beta1
    timeoutSeconds: 5
  - clientConfig:
      caBundle: Cg==
      service:
        name: vela-core-webhook
        namespace: vela-system
        path: /validating-core-oam-dev-v1alpha2-traitdefinitions
    failurePolicy: Ignore
    name: validating.core.oam.dev.v1alpha2.traitdefinitions
    sideEffects: None
    admissionReviewVersions:
      - v1beta1
    rules:
      - apiGroups:
          - core.oam.dev
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - traitdefinitions
        scope: Cluster
    timeoutSeconds: 5
  - clientConfig:
      caBundle: Cg==
      service:
        name: vela-core-webhook
        namespace: vela-system
        path: /validate-standard-oam-dev-v1alpha1-podspecworkload
    failurePolicy: Fail
    name: vcontainerized.kb.io
    admissionReviewVersions:
      - v1beta1
    sideEffects: None
    rules:
      - apiGroups:
          - standard.oam.dev
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - podspecworkloads
  - clientConfig:
      caBundle: Cg==
      service:
        name: vela-core-webhook
        namespace: vela-system
        path: /validating-core-oam-dev-v1beta1-applications
    failurePolicy: Ignore
    name: validating.core.oam.dev.v1beta1.applications
    admissionReviewVersions:
      - v1beta1
    sideEffects: None
    rules:
      - apiGroups:
          - core.oam.dev
        apiVersions:
          - v1beta1
        operations:
          - CREATE
          - UPDATE
        resources:
          - applications
---
# Source: vela-core/templates/definitions/containerizedworkloads.yaml
apiVersion: core.oam.dev/v1beta1
kind: WorkloadDefinition
metadata:
  name: containerizedworkloads.core.oam.dev
  namespace: vela-system
spec:
  definitionRef:
    name: containerizedworkloads.core.oam.dev
  childResourceKinds:
    - apiVersion: apps/v1
      kind: Deployment
    - apiVersion: v1
      kind: Service
---
# Source: vela-core/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name:  kubevela-vela-core-admission
  namespace: vela-system
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: vela-core-admission
    helm.sh/chart: vela-core-0.1.0
    app.kubernetes.io/name: vela-core
    app.kubernetes.io/instance: kubevela
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: vela-core/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name:  kubevela-vela-core-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: vela-core-admission
    helm.sh/chart: vela-core-0.1.0
    app.kubernetes.io/name: vela-core
    app.kubernetes.io/instance: kubevela
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
      - mutatingwebhookconfigurations
    verbs:
      - get
      - update
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - update
---
# Source: vela-core/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  kubevela-vela-core-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: vela-core-admission
    helm.sh/chart: vela-core-0.1.0
    app.kubernetes.io/name: vela-core
    app.kubernetes.io/instance: kubevela
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubevela-vela-core-admission
subjects:
  - kind: ServiceAccount
    name: kubevela-vela-core-admission
    namespace: vela-system
---
# Source: vela-core/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  kubevela-vela-core-admission
  namespace: vela-system
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: vela-core-admission
    helm.sh/chart: vela-core-0.1.0
    app.kubernetes.io/name: vela-core
    app.kubernetes.io/instance: kubevela
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: vela-core/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name:  kubevela-vela-core-admission
  namespace: vela-system
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: vela-core-admission
    helm.sh/chart: vela-core-0.1.0
    app.kubernetes.io/name: vela-core
    app.kubernetes.io/instance: kubevela
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubevela-vela-core-admission
subjects:
  - kind: ServiceAccount
    name: kubevela-vela-core-admission
    namespace: vela-system
---
# Source: vela-core/templates/test/test-application.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "kubevela-application-test"
  annotations:
    "helm.sh/hook": test
spec:
  serviceAccountName: kubevela-vela-core
  containers:
    - name: kubevela-application-test
      image: alpine/k8s:1.18.2
      imagePullPolicy: IfNotPresent
      command:
        - /bin/bash
        - -ec
        - |

          set -e

          echo "Waiting application is ready..."

          echo "waiting for application being Applied"
          kubectl -n vela-system wait --for=condition=Applied application first-vela-app --timeout=3m
          echo "application being Applied"

          # wait for deploy being created
          echo "waiting for deployment being available"
          kubectl -n vela-system wait --for=condition=available deploy express-server --timeout 3m
          echo "deployment being available"

          # wait for ingress being created
          while ! [ `kubectl -n vela-system get ing express-server | grep -v NAME | wc -l` = 1 ]; do
            echo "waiting for ingress being created"
            sleep 1
          done



          echo "Application and its components are created"
  restartPolicy: Never
---
# Source: vela-core/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name:  kubevela-vela-core-admission-create
  namespace: vela-system
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: vela-core-admission-create
    helm.sh/chart: vela-core-0.1.0
    app.kubernetes.io/name: vela-core
    app.kubernetes.io/instance: kubevela
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      name:  kubevela-vela-core-admission-create
      labels:
        app: vela-core-admission-create
        helm.sh/chart: vela-core-0.1.0
        app.kubernetes.io/name: vela-core
        app.kubernetes.io/instance: kubevela
        app.kubernetes.io/version: "0.1.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: create
          image: wonderflow/kube-webhook-certgen:v2.1
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=vela-core-webhook,vela-core-webhook.vela-system.svc
            - --namespace=vela-system
            - --secret-name=kubevela-vela-core-admission
            - --key-name=tls.key
            - --cert-name=tls.crt
      restartPolicy: OnFailure
      serviceAccountName: kubevela-vela-core-admission
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: vela-core/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name:  kubevela-vela-core-admission-patch
  namespace: vela-system
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: vela-core-admission-patch
    helm.sh/chart: vela-core-0.1.0
    app.kubernetes.io/name: vela-core
    app.kubernetes.io/instance: kubevela
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      name:  kubevela-vela-core-admission-patch
      labels:
        app: vela-core-admission-patch
        helm.sh/chart: vela-core-0.1.0
        app.kubernetes.io/name: vela-core
        app.kubernetes.io/instance: kubevela
        app.kubernetes.io/version: "0.1.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: patch
          image: wonderflow/kube-webhook-certgen:v2.1
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=kubevela-vela-core-admission
            - --namespace=vela-system
            - --secret-name=kubevela-vela-core-admission
            - --patch-failure-policy=Fail
            - --crds=applications.core.oam.dev
      restartPolicy: OnFailure
      serviceAccountName: kubevela-vela-core-admission
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: vela-core/templates/test/test-application.yaml
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  annotations:
    helm.sh/hook: test-success
  name: first-vela-app
spec:
  components:
    - name: express-server
      type: webservice
      properties:
        image: crccheck/hello-world
        port: 8000
      traits:
        - type: ingress
          properties:
            domain: testsvc.example.com
            http:
              "/": 8000
