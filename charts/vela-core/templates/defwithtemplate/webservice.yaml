# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1alpha2
kind: WorkloadDefinition
metadata:
  name: webservice
  annotations:
    definition.oam.dev/description: "Describes long-running, scalable, containerized services that have a stable network endpoint to receive external network traffic from customers.
    If workload type is skipped for any service defined in Appfile, it will be defaulted to `webservice` type."
spec:
  definitionRef:
    name: deployments.apps
  extension:
    template: |
      output: {
      	apiVersion: "apps/v1"
      	kind:       "Deployment"
      	spec: {
      		selector: matchLabels: {
      			"app.oam.dev/component": context.name
      		}
      
      		template: {
      			metadata: labels: {
      				"app.oam.dev/component": context.name
      			}
      
      			spec: {
      				containers: [{
      					name:  context.name
      					image: parameter.image
      
      					if parameter["cmd"] != _|_ {
      						command: parameter.cmd
      					}
      
      					if parameter["env"] != _|_ {
      						env: parameter.env
      					}
      
      					if context["config"] != _|_ {
      						env: context.config
      					}
      
      					ports: [{
      						containerPort: parameter.port
      					}]
      
      					if parameter["cpu"] != _|_ {
      						resources: {
      							limits:
      								cpu: parameter.cpu
      							requests:
      								cpu: parameter.cpu
      						}
      					}
      				}]
      		}
      		}
      	}
      }
      parameter: {
      	// +usage=Which image would you like to use for your service
      	// +short=i
      	image: string
      
      	// +usage=Commands to run in the container
      	cmd?: [...string]
      
      	// +usage=Which port do you want customer traffic sent to
      	// +short=p
      	port: *80 | int
      	// +usage=Define arguments by using environment variables
      	env?: [...{
      		// +usage=Environment variable name
      		name: string
      		// +usage=The value of the environment variable
      		value?: string
      		// +usage=Specifies a source the value of this var should come from
      		valueFrom?: {
      			// +usage=Selects a key of a secret in the pod's namespace
      			secretKeyRef: {
      				// +usage=The name of the secret in the pod's namespace to select from
      				name: string
      				// +usage=The key of the secret to select from. Must be a valid secret key
      				key: string
      			}
      		}
      	}]
      	// +usage=Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
      	cpu?: string
      }
      
